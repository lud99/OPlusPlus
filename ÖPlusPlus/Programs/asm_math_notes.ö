int a = 10;

a = 3;


/*

-- ASM --

section .data
    a DW 10 ; double word, 32 bit number

section .text
global CMAIN
CMAIN:
    mov dword [a], 3 ; store 3 into 32 bits of the variable
    ; mov byte [a], 3 ; store 3 into the 8 least significant bits of the variable

    ret

*/

int b;
b = 1 + 2 + 3;

/* -- ASM --

section .data
    b DW 0

section .text
global CMAIN
CMAIN:
    mov eax, 1 ; first number goes into eax
    mov ebx, 2 ; rest into ebx
    add eax, ebx 
    ; eax now has the result
    mov ebx, 3
    add eax, ebx    
    
    ; reset registers
    mov eax, 0
    mov ebx, 0
    
    mov dword [b], eax ; store
    
    ret

*/


int b;
b = (1 + 2) - (3 + 4);

 // 2 + 3 -> sub 1, result

/* -- ASM --

section .data
    b DW 0

section .text
global CMAIN
CMAIN:
    ; 1 + 2
    mov eax, 1
    mov ebx, 2
    add eax, ebx 
    push eax
    
    ; 3 + 4
    mov eax, 3
    mov ebx, 4
    add eax, ebx 
    push eax
    
    pop ebx
    pop eax
    sub eax, ebx
   
    mov dword [b], eax
            
    ; reset registers
    mov eax, 0
    mov ebx, 0
    
    ret

*/

// https://www.tutorialspoint.com/assembly_programming/assembly_arithmetic_instructions.htm
int c;
c = 2 * 3;

/* -- ASM --

    ; imul = eax * [reg], stores result in [edx][eax]. eax is the one that matters
    
    ; 2 * 3 -> eax
    mov eax, 2
    mov ebx, 3
    imul ebx

    mov dword [c], eax
            
    ; reset registers
    mov eax, 0
    mov ebx, 0

*/

(3 - 4) * (3 + 4)

/* -- ASM --

    ; rightmost operation first. push. left. push. pop. pop
    ; 3 + 4
    mov eax, 3
    mov ebx, 4
    add eax, ebx 
    push eax
    
    ; 3 - 4
    mov eax, 3
    mov ebx, 4
    sub eax, ebx 
    push eax
    
    pop eax
    pop ebx
    ; imul = eax * [reg], stores result in [edx][eax]. eax is the one that matters
    imul eax, ebx

*/

5 / 4

 // https://www.tutorialspoint.com/assembly_programming/assembly_arithmetic_instructions.htm
/* -- ASM --

    mov edx, 0 ; must be 0
    mov eax, 5 ; dividend

    mov ebx, 4 ; divisor
    
    idiv ebx ; result = [eax], remainder = [edx]

*/

/*
 
-- stack setup -- 

push ebp ; save old top of stack
mov ebp, esp ; current top of stack is bottom of new stack frame

; there is now nothing above ebp
; free variable is always spot after, esp (esp - 4)
    
; store variables
mov dword [esp - 4], 4
mov dword [esp - 8], 5
    
mov esp, ebp ; restore esp, now points to old ebp (start of frame)
pop ebp ; restore old ebp
ret

 */

 /* -- code for printing a string -- 

     mov ebp, esp; for correct debugging
    push ebp; save old top of stack
    mov ebp, esp; current top of stack is bottom of new stack frame

    ; string is stored "backwards"
    mov dword [ebp - 4], 0x0
    sub esp, 4
    mov dword [ebp - 8], 0x42424242
    sub esp, 4
    mov dword [ebp - 12], 0x41414141
    sub esp, 4
    
    sub esp, 4 ; reserved space
    lea eax, [ebp - 12] ; copy pointer of start of string and store in eax
    mov [esp], eax ; move pointer to where esp points in memory (reserved space for argument)
    call printf
    
    add esp, 4 ; remove space
    
    mov esp, ebp; restore esp, now points to old ebp(start of frame)
    pop ebp; restore old ebp


 */